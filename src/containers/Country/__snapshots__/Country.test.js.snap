// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Country should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Country
    name="France"
    rating={2.4}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="country"
      >
        <h2>
          France
        </h2>
        <button
          className="rating 2.4"
        >
          2.4
        </button>
      </div>,
      "style": Object {
        "textDecoration": "none",
      },
      "to": "/details/undefined",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            France
          </h2>,
          <button
            className="rating 2.4"
          >
            2.4
          </button>,
        ],
        "className": "country",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "France",
          },
          "ref": null,
          "rendered": "France",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 2.4,
            "className": "rating 2.4",
          },
          "ref": null,
          "rendered": 2.4,
          "type": "button",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="country"
        >
          <h2>
            France
          </h2>
          <button
            className="rating 2.4"
          >
            2.4
          </button>
        </div>,
        "style": Object {
          "textDecoration": "none",
        },
        "to": "/details/undefined",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h2>
              France
            </h2>,
            <button
              className="rating 2.4"
            >
              2.4
            </button>,
          ],
          "className": "country",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "France",
            },
            "ref": null,
            "rendered": "France",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 2.4,
              "className": "rating 2.4",
            },
            "ref": null,
            "rendered": 2.4,
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
