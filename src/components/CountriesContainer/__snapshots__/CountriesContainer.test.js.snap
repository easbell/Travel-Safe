// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CountriesContainer should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CountriesContainer
    countries={
      Array [
        Object {
          "name": "USA",
        },
        Object {
          "name": "France",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <FilterResults
          defaultAllItems={true}
          fuseConfig={
            Object {
              "keys": Array [
                "name",
              ],
              "matchAllTokens": true,
              "threshold": 0,
              "tokenize": true,
            }
          }
          items={
            Array [
              Object {
                "name": "USA",
              },
              Object {
                "name": "France",
              },
            ]
          }
          prefilters={Array []}
        >
          [Function]
        </FilterResults>,
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": [Function],
          "defaultAllItems": true,
          "fuseConfig": Object {
            "keys": Array [
              "name",
            ],
            "matchAllTokens": true,
            "threshold": 0,
            "tokenize": true,
          },
          "items": Array [
            Object {
              "name": "USA",
            },
            Object {
              "name": "France",
            },
          ],
          "prefilters": Array [],
        },
        "ref": null,
        "rendered": [Function],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <FilterResults
            defaultAllItems={true}
            fuseConfig={
              Object {
                "keys": Array [
                  "name",
                ],
                "matchAllTokens": true,
                "threshold": 0,
                "tokenize": true,
              }
            }
            items={
              Array [
                Object {
                  "name": "USA",
                },
                Object {
                  "name": "France",
                },
              ]
            }
            prefilters={Array []}
          >
            [Function]
          </FilterResults>,
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": [Function],
            "defaultAllItems": true,
            "fuseConfig": Object {
              "keys": Array [
                "name",
              ],
              "matchAllTokens": true,
              "threshold": 0,
              "tokenize": true,
            },
            "items": Array [
              Object {
                "name": "USA",
              },
              Object {
                "name": "France",
              },
            ],
            "prefilters": Array [],
          },
          "ref": null,
          "rendered": [Function],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
